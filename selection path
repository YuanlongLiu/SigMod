	##this function generates all different selections, by first reduce the net size, then scan the path 
	##last modified: 13-11-2015
	##compute linear k(\lambda) for each cut

	##this function calculates the capacity line
	selection_path_sans_seed <- function( net, lambda=0, gama, eta_min )
	{
		st_info = st_sans_seed(net, lambda, gama, eta=eta_min) 
		selection = st_info$selected
		if( length(selection) == 0 ) return(selection)
		
		net_reduced = induced.subgraph( net, selection )
		# if( ecount( net_reduced ) < 10000 ) { cat('Loose network selected, quit\n'); return( selection ) }
		selections = selection_path( net_reduced, seed_nodes=NA, lambda, gama, eta_min=eta_min, selection_diff=1 )
		return( selections )
	}
	
	

	##this function generates all different selections, by first reduce the net size, then scan the path 
	##last modified: 13-11-2015
	##compute linear k(\lambda) for each cut

	##this function calculates the capacity line
	selection_path_avec_seed <- function( net, seed_nodes, lambda=0, gama, eta_max=1E7, eta_min, selection_diff=1 )
	{
		st_info = st_avec_seed( net, seed_nodes, lambda, gama, eta=eta_min ) 
		selection = st_info$selected
		net_reduced = induced.subgraph( net, selection )
		if( vcount( net_reduced ) <=1 ) return( net_reduced )
		
		keep_names = setdiff( V(net)$name, seed_nodes )
		d_comp = strength( net ) ##d for the complete network, including the seed nodes
		net = induced.subgraph( net, keep_names ) ##network with seed_nodes removed
		d = strength( net )
		delta_d = d[keep_names] - d_comp[keep_names]

		V(net_reduced)$weight = V(net)[ V(net_reduced)$name ]$weight - lambda*d_comp[ V(net_reduced)$name ] - (lambda+2*gama)*delta_d[ V(net_reduced)$name ]
		
		selections = selection_path( net_reduced, seed_nodes=NA, lambda=0, gama=lambda+gama, eta_max, eta_min, selection_diff )
		return( selections )
	}
	
	##the seed only effects for its interacted nodes. Once these nodes are not selected, they take no effect
	
	
